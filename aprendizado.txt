Javascript é uma linguagem dinâmica

documentação: w3schools, mozilla e ecmascript.

node js é um ambiente de execução, usando o motor v8 que interpreta e compila o código, no fim das contas o node js simula oque o devtools faz.
----------------------------------------------------------
metodos nativos js:

string.charAt(elemento) - caça a index do elemento
string.toUpperCase() - transforma a string em maiusculas
string.toLowerCase() - transforma a string em minusculas
string.match() - 
string.replace() - substitui caracteres
string.slice() - retorna caracteres de um intervalo de endereços
string.split() - separa elemento de uma array por um determinado caracter
string.trim() - remove os espaços em excesso de uma string.
vetor.push(novo_elemento) - adiciona elemento ao final do vetor
vetor.unshift(novo_elemento) - adiciona elemento ao inicio de um vetor
vetor.pop() - remove ultimo elemento (pode retornar)
vetor.shift - remove primeiro elemento (pode retornar)
delete vetor[i] - remove o conteudo daquele elemento
vetor.slice(i,j) - retorna determinado intervalo do vetor
vetor instanceOf Array - retorna boolean, se é vetor ou nao
vetor.indexOf(elemento) - caça a index de um caracter a partir do inicio
vetor.lastIndexOF() - caça a index de um caracter commeçando do ultimo caracter
string.match(/[a-z]/g) - expressões regulares, imprime um vetor com os caracteres minusculos
string.search('Duart') - busca o caracter/elemento e imprime o endereço: 5, se n tiver imprime -1 
string.replace(/a/g, 'o') - troca os caracteres, o g faz com que seja todos os caracteres 'a' trocados por 'o'.

numero.toString() - transforma para string
numero.toFixed() - arredonda as casas, porém retorna uma string

funções nativas do js:
typeof() - vê a tipagem da variavel.
eval() - executa uma string como código JS e retorna o resultado (tem q tomar cuidado e ser tratado antes de utilizado).
atributos()
vetor.length
string.length


------------------------------------------------------

objetos para manipulações de numero:
object Number
Number.isInteger(numero)
Number.isFloat(numero)
object math
Math.floor(numero)
Math.ceil(numero)
----------------------------------------------------------
objetos

possuem estrutura usando chaves {}
exemplo de objeto criado:
const pessoa ={
    nome: 'Caio';
    sobrenome: 'Duarte';
}
exemplo de como acessar
console.log(pessoa.nome) //imprime: Caio

além disso, objetos podem conter diferentes tipos de dados no mesmo objeto.

const cidadao = {
    nome: 'Sergio',
    idade: 32,
    ativo: False,
    profissão: Null
}

atribuir por desestruturação
let {nome: name, idade} = cidadao;
console(name,idade) //imprime: 'Sergio' 32

atribuição por desestruturação em objetos:

const carro = {
    nome: 'Gol',
    ano: 2018,
    marcaCarro: 'Volkswagen',
    motor:{
        marcaMotor: 'ABB eletrics',
        nome:'V8',
        ano:2012,
    }
}

//* desestruturando em variaveis
const {
    nome: carroGol, //atribuição renomeando
    ano = 2020, //atribuição mudando valor de chave (funciona somente se a variavel não existir, tornando se um valor default) 
    marcaCarro, //atribuição normal
    cor ='Preto', //atribuição adicionando nova variavel
    motor, //atribuição de objeto inteiro
    } = carro
console.log(carroGol,ano, marcaCarro,cor, motor)

uso do this:
const pessoa = {
    nome: 'Maria',
    idade: 30,
    apresentar: function() {
        console.log(`Olá, meu nome é ${this.nome} e tenho ${this.idade} anos.`);
    }
};
o this referencia o dado do objeto/função em que ele estiver contido.
se o vc estiver dentro de um objeto1 e dentro desse objeto1 tem um objeto2, e usar this dentro do objeto2, os dados do 2 serão referenciados.

para solucionar este problema e ficar com o do objeto1, utiliza-se bind() ou arrow function aonde seria o acesso (objeto2).
ex:
objeto.bind().
pessoa.apresentar(); // Saída: Olá, meu nome é Maria e tenho 30 anos.

---------------------------------------------------------
let != var != const

let - serve para declarações comuns (mutavel)
var - serve para redeclarar váriaveis (mutavel)
const - serve para declarar um valor constante (imutavel), porém em objetos você consegue trocar o conteudo por formas de não atribuição

let consegue ser redeclarada dentro de blocos sem afetar a variavel original
var consegue ser redeclarada dentro de functions sem afetar a variavel original

--------------------------------------------------------------
tipos primitivos conhecitos: String(texto), number(inteiro, flutuante), boolean (True, False), symbol(...)
outros tipos, porém esquisitos: null(object), undefined(sem atributo, inutilizavel, não chega a ser null), array(object), NaN(apesar de possuir a tipagem number, não é um number)


trocar tipagem:
Number(texto) -> de texto para numero
ParseFloat(texto/inteiro) -> de texto para float
ParseInt(texto/float) -> de texto/float para inteiro

ou até mesmo atribuir valor de outro tipo.
exemplo: let nums = [1,2,4]
nums = 124

console.log(typeof(100/0)) // infinity

troca de valores:
valores primitivos - por cópia - String, Number, boolean, undefined, null, bigint, symbol
valores referência - array, object, function
----------------------------------------------------------------------------------
vetor 
como passar:
let a = [1,2,3]

let b = [...a] //operador spread
let [c, ...resto] = a //operador rest

atribuir por desestruturação em array:

let [um, ,tres] = a
//um = 1
//tres = 3
-------------------------------------------------------------------
alert() - serve para imprimir no navegador de forma simples
prompt() - serve para ler do navegador de forma simples
confirm() - serve como um choice do navegador de forma simples

----------------------------------------------------------------------
short- circuit
 * * && - e - basta uma falsa pra imrpimir falsa, e um cadeia de verdades pra imprimr a ultima verdade

    //console.log(true  && false && 'joao') //imprime false
    //console.log(false  && 0 && 'joao') //imprime false
    //console.log(true  && 1 && 'joao') //imprime joao q é verdade


 * * || - ou - basta uma verdade pra imprimir a primeira verdade, e uma cadeia de falsas pra imprimir a ultima falsa

     // console.log(null || 1 || false) //imprime 1 q é verdade
    // console.log(false  || 0 || 'joao') //imprime joao q é verdade
    // console.log( null || NaN || 0) //imprime 0 q é falso
 ------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------

não é boas práticas:
mostrar o erro que seu sistema deu qunado fazer o tratamento de erros.
usar == e !=
usar var
usar vetor com diferentes tipos de dados
imprimir incremento direto.

boas práticas: chamar evento de: 'event' ou 'e'
fazer uma função para cada funcionalidade do código, leve isso extremamente a sério.
----------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------
switch case:
exemplo:
    switch(dia){
        case 0: return 'Domingo'; //pode ser substituído por break, a ideia é que o switch se encerre, return ou break servem pra isso.
        case 1: return 'Segunda-feira';
        case 2: return 'Terça-feira';
        case 3: return 'Quarta-feira';
        case 4: return 'Quinta-feira';
        case 5: return 'Sexta-feira';
        case 6: return 'Sábado';
        default: return 'data inválida.'
    }
-------------------------------------------------------------------------------------------
DOM (document object model), mozilla, documentação: https://developer.mozilla.org/pt-BR/docs/Glossary/DOM
DOM é uma API na qual JS/TS tem suporte para manipulá-lo, porém NODE-JS não tem suporte para roda-lo,
para rodar, somente no nagevador. o DOM é modelo que serve para transformar documentos(HTML,XML) em objetos afim.

manipulações de classe com DOM:
classList - mexe co  a class da tag
classList.add('nomeClasse') - adiciona classe
classList.remove('nomeClasse') - remove a classe
classList.contains('nomeClass') - retorna true se existir uma classe com esse nome na tag.


---------------------------------------------------------------------------------------------
tipos de for:
for normal - manipulação total(endereços, valores, oque quiser.)
for in - mexer com os endereços do array - o unico que consegue iterar objeto
for of - mexer com os valores do array
vetor.forEach - método pra iterar dentro do vetor
----------------------------------------------------------------------------------------------
break - serve para quebrar o código.
continue - serve para pular a iteração.
exemplo de código:
const nums = [1,2,3,4,5,6,7,8,9];
let i =0;
while(i !== nums.length){
    i++;
    if(nums[i] === 4){
        continue; //pula o número quatro.
    }
    console.log(i);
    if(nums[i]===8){
        break; //para o código quando chegar no oito.
    }
}
----------------------------------------------------------------------------------------
eventos em JS/TS
event.target - captura todos os eventos  disparados dentro do código.

você utiliza a manipulação por evento ao colocar esse parametro no addEventListener, exemplo:

document.addEventListener('click', (event)=> {
    console.log(event.target) //este código irá imprimir eventos de cliques disparados.
})
------------ ------------------------------------------------------------------------------